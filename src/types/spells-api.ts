/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/spells": {
    /**
     * Get all spells that match query
     * @description This endpoint returns all homebrewed spells in the database. You can filter the results by setting various query parameters. If no spells match the query, an empty array is returned.
     */
    get: operations["SpellsController_mongoFindAll"];
    /**
     * Reseed the database with spells
     * @description This endpoint deletes all spells in the database and replaces them with the ones provided from the request body.
     */
    post: operations["SpellsController_seedBulk"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Spell: {
      name: string;
      /** @enum {number} */
      level: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
      castingTime: string;
      range: string;
      area?: string;
      duration: string;
      components: ("V" | "S" | "M")[];
      material?: string;
      concentration?: boolean;
      ritual?: boolean;
      flavor?: string;
      description: string[];
      atHigherLevels?: string;
      cantripUpgrade?: string;
      /** @enum {string} */
      school: "Abjuration" | "Conjuration" | "Divination" | "Enchantment" | "Evocation" | "Illusion" | "Necromancy" | "Transmutation";
      /** @enum {string} */
      group?: "Elemental Torrents";
      sources: ("Primal" | "Arcane" | "Divine" | "Barbarian" | "Bard" | "Cleric" | "Druid" | "Fighter" | "Monk" | "Paladin" | "Ranger" | "Rogue" | "Sorcerer" | "Warlock" | "Wizard" | "Artificer")[];
    };
    CreateSpellDto: {
      name: string;
      /** @enum {number} */
      level: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
      castingTime: string;
      range: string;
      area?: string;
      duration: string;
      components: string[];
      material?: string;
      concentration?: boolean;
      ritual?: boolean;
      flavor?: string;
      description: string[];
      atHigherLevels?: string;
      cantripUpgrade?: string;
      /** @enum {string} */
      school: "Abjuration" | "Conjuration" | "Divination" | "Enchantment" | "Evocation" | "Illusion" | "Necromancy" | "Transmutation";
      /** @enum {string} */
      group?: "Elemental Torrents";
      sources: ("Primal" | "Arcane" | "Divine" | "Barbarian" | "Bard" | "Cleric" | "Druid" | "Fighter" | "Monk" | "Paladin" | "Ranger" | "Rogue" | "Sorcerer" | "Warlock" | "Wizard" | "Artificer")[];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get all spells that match query
   * @description This endpoint returns all homebrewed spells in the database. You can filter the results by setting various query parameters. If no spells match the query, an empty array is returned.
   */
  SpellsController_mongoFindAll: {
    parameters: {
      query?: {
        /** @description Whether the spell can be cast as a ritual */
        ritual?: "true" | "false";
        /** @description Whether the spell requires concentration */
        concentration?: "true" | "false";
        /** @description One of the source a spell can belong to */
        sources?: ("Primal" | "Arcane" | "Divine" | "Barbarian" | "Bard" | "Cleric" | "Druid" | "Fighter" | "Monk" | "Paladin" | "Ranger" | "Rogue" | "Sorcerer" | "Warlock" | "Wizard" | "Artificer")[];
        /** @description The group the spell might belong to */
        group?: "Elemental Torrents";
        /** @description The components of the spell */
        components?: ("V" | "S" | "M")[];
        /** @description The school of the spell */
        school?: "Abjuration" | "Conjuration" | "Divination" | "Enchantment" | "Evocation" | "Illusion" | "Necromancy" | "Transmutation";
        /** @description The exact level of the spells (0 to 9, cantrip is 0) */
        level?: "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";
        /**
         * @description Strings of characters that the spell name must contain
         * @example fire
         */
        name?: unknown;
      };
    };
    responses: {
      /** @description The requested spell(s) */
      200: {
        content: {
          "application/json": components["schemas"]["Spell"][];
        };
      };
    };
  };
  /**
   * Reseed the database with spells
   * @description This endpoint deletes all spells in the database and replaces them with the ones provided from the request body.
   */
  SpellsController_seedBulk: {
    parameters: {
      header: {
        /** @description A valid API key provided by this API's maintainer */
        "api-key": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSpellDto"][];
      };
    };
    responses: {
      /** @description The newly created spells */
      201: {
        content: {
          "application/json": components["schemas"]["Spell"][];
        };
      };
      /** @description The API key is missing or invalid */
      401: {
        content: never;
      };
    };
  };
}
